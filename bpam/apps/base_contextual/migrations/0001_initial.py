# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0001_initial'),
        ('base_vocabulary', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChemicalAnalysis',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('depth', models.CharField(max_length=100, null=True, blank=True)),
                ('moisture', models.FloatField(null=True, verbose_name='Soil Moisture', blank=True)),
                ('gravel', models.CharField(help_text='>2.0mm', max_length=100, null=True, verbose_name='Gravel', blank=True)),
                ('texture', models.FloatField(max_length=100, null=True, blank=True)),
                ('course_sand', models.FloatField(help_text='200-2000 \xb5m', null=True, blank=True)),
                ('fine_sand', models.FloatField(help_text='20-200 \xb5m', null=True, blank=True)),
                ('sand', models.FloatField(null=True, blank=True)),
                ('silt', models.FloatField(help_text='2-20 \xb5m', null=True, blank=True)),
                ('clay', models.FloatField(help_text='<2 \xb5m', null=True, blank=True)),
                ('ammonium_nitrogen', models.FloatField(null=True, verbose_name='Ammonium Nitrogen', blank=True)),
                ('nitrate_nitrogen', models.FloatField(null=True, verbose_name='Nitrate Nitrogen', blank=True)),
                ('phosphorus_colwell', models.FloatField(null=True, verbose_name='Phosphorus Colwell', blank=True)),
                ('potassium_colwell', models.FloatField(null=True, verbose_name='Potassium Colwell', blank=True)),
                ('sulphur', models.FloatField(null=True, blank=True)),
                ('organic_carbon', models.FloatField(null=True, blank=True)),
                ('conductivity', models.FloatField(null=True, blank=True)),
                ('cacl2_ph', models.FloatField(null=True, verbose_name='pH Level CaCl2', blank=True)),
                ('h20_ph', models.FloatField(null=True, verbose_name='pH Level H20', blank=True)),
                ('dtpa_copper', models.FloatField(null=True, verbose_name='DTPA Copper', blank=True)),
                ('dtpa_iron', models.FloatField(null=True, verbose_name='DTPA Iron', blank=True)),
                ('dtpa_manganese', models.FloatField(null=True, verbose_name='DTPA Manganse', blank=True)),
                ('dtpa_zinc', models.FloatField(null=True, verbose_name='DTPA Zinc', blank=True)),
                ('exc_aluminium', models.FloatField(null=True, verbose_name='Exc. Aluminium', blank=True)),
                ('exc_calcium', models.FloatField(null=True, verbose_name='Exc. Calsium', blank=True)),
                ('exc_magnesium', models.FloatField(null=True, verbose_name='Exc. Magnesium', blank=True)),
                ('exc_potassium', models.FloatField(null=True, verbose_name='Exc. Potassium', blank=True)),
                ('exc_sodium', models.FloatField(null=True, verbose_name='Exc. Sodium', blank=True)),
                ('boron_hot_cacl2', models.FloatField(null=True, verbose_name='Boron Hot CaCl2', blank=True)),
                ('total_nitrogen', models.FloatField(null=True, verbose_name='Total Nitrogen', blank=True)),
                ('total_carbon', models.FloatField(null=True, verbose_name='Total Carbon', blank=True)),
                ('bpa_id', models.ForeignKey(verbose_name='BPA ID', to='common.BPAUniqueID')),
                ('colour', models.ForeignKey(verbose_name='Soil Colour', to='base_vocabulary.SoilColour', null=True)),
            ],
            options={
                'verbose_name_plural': 'Sample Chemical Essays',
            },
        ),
        migrations.CreateModel(
            name='CollectionSite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('debug_note', models.TextField(null=True, verbose_name='Original Data', blank=True)),
                ('country', models.CharField(max_length=100, blank=True)),
                ('state', models.CharField(max_length=100, blank=True)),
                ('location_name', models.CharField(max_length=100, verbose_name='Location Name', blank=True)),
                ('image_url', models.URLField(null=True, verbose_name='Site Photo', blank=True)),
                ('date_sampled', models.DateField(null=True, verbose_name='Date Sampled')),
                ('lat', models.FloatField(help_text='Degree decimal', verbose_name='Latitude')),
                ('lon', models.FloatField(help_text='Degree decimal', verbose_name='Longitude')),
                ('elevation', models.IntegerField(null=True, verbose_name='Elevation')),
                ('vegetation_total_cover', models.CharField(max_length=200, verbose_name='Vegetation Total Cover', blank=True)),
                ('vegetation_dominant_trees', models.CharField(max_length=1000, verbose_name='Vegetation Dominant Trees', blank=True)),
                ('slope', models.CharField(max_length=20, blank=True)),
                ('slope_aspect', models.CharField(help_text='Direction or degrees; e.g., NW or 315\xb0', max_length=100, verbose_name='Slope Aspect', blank=True)),
                ('environment_event', models.CharField(max_length=100, blank=True)),
                ('fire_history', models.CharField(max_length=500, verbose_name='Fire History', blank=True)),
                ('fire_intensity', models.CharField(max_length=500, verbose_name='Fire Intensity', blank=True)),
                ('date_since_change_in_land_use', models.CharField(max_length=100, null=True, verbose_name='Date Since Land Use Change', blank=True)),
                ('crop_rotation_1', models.TextField(null=True, verbose_name='Crop rotation 1 year ago', blank=True)),
                ('crop_rotation_2', models.TextField(null=True, verbose_name='Crop rotation 2 years ago', blank=True)),
                ('crop_rotation_3', models.TextField(null=True, verbose_name='Crop rotation 3 years ago', blank=True)),
                ('crop_rotation_4', models.TextField(null=True, verbose_name='Crop rotation 4 years ago', blank=True)),
                ('crop_rotation_5', models.TextField(null=True, verbose_name='Crop rotation 5 years ago', blank=True)),
                ('agrochemical_additions', models.CharField(max_length=300, null=True, verbose_name='Agrochemical Additions', blank=True)),
                ('other_comments', models.TextField(null=True, verbose_name='Comments', blank=True)),
                ('broad_land_use', models.ForeignKey(related_name='broad', verbose_name='Broad Land Use', to='base_vocabulary.LandUse', null=True)),
                ('current_land_use', models.ForeignKey(related_name='current', verbose_name='Current Land Use', to='base_vocabulary.LandUse', null=True)),
                ('drainage_classification', models.ForeignKey(verbose_name='Drainage Classification', to='base_vocabulary.DrainageClassification', null=True)),
                ('general_ecological_zone', models.ForeignKey(verbose_name='General Ecological Zone', to='base_vocabulary.GeneralEcologicalZone', null=True)),
                ('immediate_previous_land_use', models.ForeignKey(related_name='previous', blank=True, to='base_vocabulary.LandUse', null=True)),
                ('profile_position', models.ForeignKey(verbose_name='Profile Position', to='base_vocabulary.ProfilePosition', null=True)),
                ('soil_type_australian_classification', models.ForeignKey(verbose_name='Australian Soil Type Classification', to='base_vocabulary.AustralianSoilClassification', null=True)),
                ('soil_type_fao_classification', models.ForeignKey(verbose_name='FAO Soil Type Classification', to='base_vocabulary.FAOSoilClassification', null=True)),
                ('tillage', models.ForeignKey(blank=True, to='base_vocabulary.TillageType', null=True)),
                ('vegetation_type', models.ForeignKey(verbose_name='Vegetation Type', to='base_vocabulary.BroadVegetationType', null=True)),
            ],
            options={
                'verbose_name_plural': 'Collection Sites',
            },
        ),
        migrations.CreateModel(
            name='SampleContext',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('debug_note', models.TextField(null=True, verbose_name='Original Data', blank=True)),
                ('depth', models.CharField(max_length=20, verbose_name='Soil Depth', blank=True)),
                ('storage', models.CharField(help_text='Storage', max_length=100, null=True, verbose_name='Storage', blank=True)),
                ('methodological_notes', models.TextField(null=True, verbose_name='Methodological Notes', blank=True)),
                ('analysis', models.ForeignKey(to='base_contextual.ChemicalAnalysis', null=True)),
                ('bpa_id', models.OneToOneField(verbose_name='BPA ID', to='common.BPAUniqueID')),
                ('horizon_classification1', models.ForeignKey(related_name='one', verbose_name='Horizon Classification One', to='base_vocabulary.HorizonClassification', null=True)),
                ('horizon_classification2', models.ForeignKey(related_name='two', verbose_name='Horizon Classification Two', to='base_vocabulary.HorizonClassification', null=True)),
                ('site', models.ForeignKey(to='base_contextual.CollectionSite', null=True)),
            ],
            options={
                'verbose_name_plural': 'Sample Context',
            },
        ),
        migrations.AlterUniqueTogether(
            name='collectionsite',
            unique_together=set([('lat', 'lon')]),
        ),
    ]
